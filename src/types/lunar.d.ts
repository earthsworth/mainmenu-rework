import type { OpenUrlRequestInitiator, HostedWorldStatus, MinecraftScreen, SocialMedia } from "@/entities";

// generated by https://github.com/earthsworth/LunarJsFunctionAnalyzer
interface LunarNamespace {
    token: string;
    subscribe(name: string, cb: (...args: any[]) => any): void;
    unsubscribe(name: string, cb: (...args: any[]) => any): void;

    language?: {
        selectLanguage(arg0: string): void;
        setForceUnicode(arg0: boolean): void;
    };
    emotes?: {
        emote(arg0: number): void;
        selectEmote(arg0: number): void;
        showEmoteLocker(): void;
        unequipAll(): void;
        remove(arg0: number): void;
        add(arg0: number, arg1: number, arg2: number): void;
    };
    friends?: {
        addFriend(arg0: string): void;
        removeFriend(arg0: string): void;
        setFriendRequests(arg0: boolean): void;
        acceptFriendRequest(arg0: string): void;
        denyFriendRequest(arg0: string): void;
        setVisibilityStatus(arg0: com_moonsworth_lunar_client_HIRCORCRRIIHCRHRIRCHCIHOCHIRIR_IHCHHORIOCCIROCRHCOHHIROICCIRO): void;
        join(arg0: string): void;
    };
    friendsChat?: {
        sendFriendMessage(arg0: string, arg1: string): string;
    };
    cosmetics?: {
        updateCosmeticOption(arg0: number, arg1: string, arg2: string): string;
        sync(): void;
        updateContext(): void;
        requestData(arg0: number): string;
        markAllAsSeen(): void;
        markAsSeen(arg0: com_moonsworth_lunar_client_HOHCOOCHHICCOOHCIRHRCOICORRRRI_HCCICHOOHHOIHRRCROCROHRIIOHOCC_HRRIHRRICRORHHRIIOIOHOOHIHIRIC_IOHCRIOROICRICIICHRHCCORHROOCO_HIRCORCRRIIHCRHRIRCHCIHOCHIRIRHIRCORCRRIIHCRHRIRCHCIHOCHIRIR): void;
        unequipAll(): void;
        toggleCosmetic(arg0: number): void;
        previewCosmetics(arg0: com_moonsworth_lunar_client_HOHCOOCHHICCOOHCIRHRCOICORRRRI_HCCICHOOHHOIHRRCROCROHRIIOHOCC_HRRIHRRICRORHHRIIOIOHOOHIHIRIC_IOHCRIOROICRICIICHRHCCORHROOCO_HIRCORCRRIIHCRHRIRCHCIHOCHIRIRIOHCRIOROICRICIICHRHCCORHROOCO, arg1: boolean): string;
    };
    lunarPlus?: {
        setColor(arg0: number): void;
    };
    lockerSettings?: {
        update(arg0: string, arg1: string): void;
    };
    hostedWorlds?: {
        inviteFriend(arg0: string): void;
        kick(arg0: string): void;
        promote(arg0: string): void;
        demote(arg0: string): void;
        onModalCallback(arg0: HostedWorldStatus, arg1: string): void;
    };
    alerts?: {
        dismiss(arg0: number): void;
    };
    homeTheme?: {
        selectTheme(arg0: string): void;
        playSound(): void;
        playSuccessSound(): void;
        playFailSound(): void;
        openWrapped(): void;
        setBalloonHighscore(arg0: number): void;
    };
    socialMedia?: {
        openSocialMedia(arg0: SocialMedia): void;
    };
    homeRadio?: {
        mute(): void;
        setVolume(arg0: number): void;
        close(): void;
    };
    accounts?: {
        addAccount(): void;
        removeAccount(arg0: string): string;
        selectAccount(arg0: string): string;
    };
    styngr?: {
        addJam(arg0: number, arg1: number): void;
        removeJam(arg0: number): void;
        previewJam(arg0: number): void;
        stopPreview(): void;
    };
    savedSkins?: {
        updateSkinType(arg0: string, arg1: string): void;
        setFavorite(arg0: string, arg1: boolean): void;
        apply(arg0: string): void;
        delete(arg0: string): void;
        add(arg0: string): void;
        rename(arg0: string, arg1: string): void;
        save(): void;
    };
    addModel(arg0: string): void;
    updateModel(arg0: string): void;
    removeModel(arg0: string): void;
    setHighlightingEnabled(arg0: boolean): void;
    forceHighlightCosmetic(arg0: number): void;
    selectCosmetic(arg0: number): void;
    playEmote(arg0: string): void;
    stopEmote(arg0: string): void;
    setToggleButtonHoveredState(arg0: boolean): void;
    setScreen(arg0: com_moonsworth_lunar_client_HOHCOOCHHICCOOHCIRHRCOICORRRRI_HCCICHOOHHOIHRRCROCROHRIIOHOCC_IOHCRIOROICRICIICHRHCCORHROOCO_HRRIHRRICRORHHRIIOIOHOOHIHIRIC): void;
    requestInitialPayload(): string;
    requestPayload(arg0: string, arg1: string): string;
    unregisterPayload(arg0: string, arg1: string): void;
    setActiveRoute(arg0: string): void;
    setActiveOverlay(arg0: string): void;
    hideOverlay(): void;
    invoke(arg0: string[]): string;
    onClick(arg0: string): void;
    openUri(arg0: string, arg1: OpenUrlRequestInitiator): void;
    setAllowKeybinds(arg0: boolean): void;
    playClickSound(): void;
}

declare global {
    interface Window {
        lunar: LunarNamespace;
    }
}

window.lunar = {
    language  = {
        selectLanguage: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        setForceUnicode: (arg0: boolean) => window.lunar.invoke(window.lunar.token, arg0),
    },
    emotes  = {
        emote: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
        selectEmote: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
        showEmoteLocker: () => window.lunar.invoke(window.lunar.token, ),
        unequipAll: () => window.lunar.invoke(window.lunar.token, ),
        remove: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
        add: (arg0: number, arg1: number, arg2: number) => window.lunar.invoke(window.lunar.token, arg0, arg1, arg2),
    },
    friends  = {
        addFriend: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        removeFriend: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        setFriendRequests: (arg0: boolean) => window.lunar.invoke(window.lunar.token, arg0),
        acceptFriendRequest: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        denyFriendRequest: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        setVisibilityStatus: (arg0: com_moonsworth_lunar_client_HIRCORCRRIIHCRHRIRCHCIHOCHIRIR_IHCHHORIOCCIROCRHCOHHIROICCIRO) => window.lunar.invoke(window.lunar.token, arg0),
        join: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    },
    friendsChat  = {
        sendFriendMessage: (arg0: string, arg1: string) => window.lunar.invoke(window.lunar.token, arg0, arg1),
    },
    cosmetics  = {
        updateCosmeticOption: (arg0: number, arg1: string, arg2: string) => window.lunar.invoke(window.lunar.token, arg0, arg1, arg2),
        sync: () => window.lunar.invoke(window.lunar.token, ),
        updateContext: () => window.lunar.invoke(window.lunar.token, ),
        requestData: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
        markAllAsSeen: () => window.lunar.invoke(window.lunar.token, ),
        markAsSeen: (arg0: com_moonsworth_lunar_client_HOHCOOCHHICCOOHCIRHRCOICORRRRI_HCCICHOOHHOIHRRCROCROHRIIOHOCC_HRRIHRRICRORHHRIIOIOHOOHIHIRIC_IOHCRIOROICRICIICHRHCCORHROOCO_HIRCORCRRIIHCRHRIRCHCIHOCHIRIRHIRCORCRRIIHCRHRIRCHCIHOCHIRIR) => window.lunar.invoke(window.lunar.token, arg0),
        unequipAll: () => window.lunar.invoke(window.lunar.token, ),
        toggleCosmetic: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
        previewCosmetics: (arg0: com_moonsworth_lunar_client_HOHCOOCHHICCOOHCIRHRCOICORRRRI_HCCICHOOHHOIHRRCROCROHRIIOHOCC_HRRIHRRICRORHHRIIOIOHOOHIHIRIC_IOHCRIOROICRICIICHRHCCORHROOCO_HIRCORCRRIIHCRHRIRCHCIHOCHIRIRIOHCRIOROICRICIICHRHCCORHROOCO, arg1: boolean) => window.lunar.invoke(window.lunar.token, arg0, arg1),
    },
    lunarPlus  = {
        setColor: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
    },
    lockerSettings  = {
        update: (arg0: string, arg1: string) => window.lunar.invoke(window.lunar.token, arg0, arg1),
    },
    hostedWorlds  = {
        inviteFriend: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        kick: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        promote: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        demote: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        onModalCallback: (arg0: HostedWorldStatus, arg1: string) => window.lunar.invoke(window.lunar.token, arg0, arg1),
    },
    alerts  = {
        dismiss: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
    },
    homeTheme  = {
        selectTheme: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        playSound: () => window.lunar.invoke(window.lunar.token, ),
        playSuccessSound: () => window.lunar.invoke(window.lunar.token, ),
        playFailSound: () => window.lunar.invoke(window.lunar.token, ),
        openWrapped: () => window.lunar.invoke(window.lunar.token, ),
        setBalloonHighscore: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
    },
    socialMedia  = {
        openSocialMedia: (arg0: com_moonsworth_lunar_client_RRHIIIRIHOHOHRCHHRRHOCIOICCRCC_CIRCIRHCCIOIIRORRORHIHICOIORCI_IIRHRHIOCCRICHIIROHHCHOHROIHHH_HCCICHOOHHOIHRRCROCROHRIIOHOCC_IOHCRIOROICRICIICHRHCCORHROOCO) => window.lunar.invoke(window.lunar.token, arg0),
    },
    homeRadio  = {
        mute: () => window.lunar.invoke(window.lunar.token, ),
        setVolume: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
        close: () => window.lunar.invoke(window.lunar.token, ),
    },
    accounts  = {
        addAccount: () => window.lunar.invoke(window.lunar.token, ),
        removeAccount: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        selectAccount: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    },
    styngr  = {
        addJam: (arg0: number, arg1: number) => window.lunar.invoke(window.lunar.token, arg0, arg1),
        removeJam: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
        previewJam: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
        stopPreview: () => window.lunar.invoke(window.lunar.token, ),
    },
    savedSkins  = {
        updateSkinType: (arg0: string, arg1: string) => window.lunar.invoke(window.lunar.token, arg0, arg1),
        setFavorite: (arg0: string, arg1: boolean) => window.lunar.invoke(window.lunar.token, arg0, arg1),
        apply: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        delete: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        add: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
        rename: (arg0: string, arg1: string) => window.lunar.invoke(window.lunar.token, arg0, arg1),
        save: () => window.lunar.invoke(window.lunar.token, ),
    },
    addModel: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    updateModel: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    removeModel: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    setHighlightingEnabled: (arg0: boolean) => window.lunar.invoke(window.lunar.token, arg0),
    forceHighlightCosmetic: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
    selectCosmetic: (arg0: number) => window.lunar.invoke(window.lunar.token, arg0),
    playEmote: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    stopEmote: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    setToggleButtonHoveredState: (arg0: boolean) => window.lunar.invoke(window.lunar.token, arg0),
    setScreen: (arg0: MinecraftScreen) => window.lunar.invoke(window.lunar.token, arg0),
    requestInitialPayload: () => window.lunar.invoke(window.lunar.token, ),
    requestPayload: (arg0: string, arg1: string) => window.lunar.invoke(window.lunar.token, arg0, arg1),
    unregisterPayload: (arg0: string, arg1: string) => window.lunar.invoke(window.lunar.token, arg0, arg1),
    setActiveRoute: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    setActiveOverlay: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    hideOverlay: () => window.lunar.invoke(window.lunar.token, ),
    invoke: (arg0: string[]) => window[`lunarInternalInvoke_`](window.lunar.token, arg0),
    onClick: (arg0: string) => window.lunar.invoke(window.lunar.token, arg0),
    openUri: (arg0: string, arg1: OpenUrlRequestInitiator) => window.lunar.invoke(window.lunar.token, arg0, arg1),
    setAllowKeybinds: (arg0: boolean) => window.lunar.invoke(window.lunar.token, arg0),
    playClickSound: () => window.lunar.invoke(window.lunar.token, ),
};

export {};